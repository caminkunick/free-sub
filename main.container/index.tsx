import { Box, BoxProps, Drawer, Toolbar } from "@mui/material";
import Head from "next/head";
import { ReactNode, useState } from "react";
import { useStore } from "../provider";
import { BarsButton, MainAppBar, MainContent, UserButton } from "./components";
import { SignedMenu } from "./signed.menu";

export type MainContainerProps = Pick<BoxProps, "children"> & {
  dense?: boolean;
  title?: string;
  sidebar?: ReactNode;
};

export const MainContainer = (props: MainContainerProps) => {
  const { store, mobile } = useStore();
  const [opens, setOpens] = useState<Record<string, HTMLElement | null>>({});
  const [drawers, setDrawers] = useState<Record<string, boolean>>({});

  const handleToggle = (key: string) => () =>
    setDrawers((s) => ({ ...s, [key]: !Boolean(s[key]) }));

  return (
    <>
      <Head>
        <title>
          {props.title
            ? `${props.title} | ${process.env.SITENAME}`
            : process.env.SITENAME}
        </title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <MainAppBar>
        <Toolbar>
          {mobile && Boolean(props.sidebar) && (
            <BarsButton
              onClick={handleToggle("sidebar")}
            />
          )}
          <Box flex={1} />
          {store.userloading ? (
            <UserButton.Loading />
          ) : store.user ? (
            <UserButton.Signed
              src={store.user.photoURL ?? undefined}
              onClick={({ currentTarget }) =>
                setOpens((s) => ({ ...s, signed: currentTarget }))
              }
            />
          ) : (
            <UserButton.Unsigned href={process.env.DISCORD_URI} />
          )}
        </Toolbar>
      </MainAppBar>
      <main>
        <MainContent
          dense={props.dense}
          sidebar={Boolean(props.sidebar) && !mobile}
        >
          {props.children}
        </MainContent>
      </main>
      <SignedMenu
        anchorEl={opens.signed}
        onClose={() => setOpens((s) => ({ ...s, signed: null }))}
      />
      {props.sidebar && (
        <Drawer
          open={Boolean(drawers.sidebar)}
          variant={mobile ? "temporary" : "permanent"}
          sx={(theme) => ({ "& .MuiPaper-root": theme.mixins.sidebar })}
          onClose={handleToggle("sidebar")}
        >
          <Toolbar />
          {props.sidebar}
        </Drawer>
      )}
    </>
  );
};
